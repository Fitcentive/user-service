# https://www.playframework.com/documentation/latest/Configuration
play {
  akka {
    jvm-exit-on-fatal-error = on
  }
  http {
    secret.key = "change-me"
    secret.key = ${?SERVICE_HTTP_SECRET}
  }
  filters {
    disabled += play.filters.hosts.AllowedHostsFilter
    disabled += play.filters.csrf.CSRFFilter
    enabled  += play.filters.gzip.GzipFilter
    enabled  += play.filters.cors.CORSFilter
  }

  ###################################################################
  # DB Evolutions
  # https://www.playframework.com/documentation/2.8.x/Evolutions
  ###################################################################
  evolutions.db.default {
    enabled=true
    autoApply=true
    autoApplyDowns=false
    useLocks=true
    autocommit=false
  }
}

#################################################################
# DB Connections
# https://www.playframework.com/documentation/2.8.x/SettingsJDBC
# https://www.playframework.com/documentation/2.8.x/ScalaDatabase
#################################################################

db-config {
  db-host = "localhost"
  db-host = ${?DB_HOST}

  db-port = "1210"
  db-port = ${?DB_PORT}

  db-database = "postgres"
  db-database = ${?DB_DATABASE}
}

db.default {
  driver=org.postgresql.Driver
  url="jdbc:postgresql://"${db-config.db-host}":"${db-config.db-port}"/"${db-config.db-database}

  username="postgres"
  username=${?DB_USER}

  password="postgres"
  password=${?DB_PASSWORD}

  logSql=true
  logStatements=true
}

environment {
  runtime-environment = "local"
  runtime-environment = ${?RUNTIME_ENVIRONMENT}
}

gcp {
  project = "fitcentive-dev-03"
  project = ${?GCP_PROJECT_NAME}

  gcs {
    user-image-upload-bucket: "fitcentive-dev-03-image-service-upload-images"
    user-image-upload-bucket: ${?USER_IMAGE_UPLOAD_BUCKET}
  }

  pubsub {

    service-account-string-credentials = "replace-me"
    service-account-string-credentials = ${?GOOGLE_APPLICATION_CREDENTIALS}

    topics {
      email-verification-token-created = "email-verification-token-created"
      email-verification-token-created = ${?TOPIC_EMAIL_VERIFICATION_TOKEN_CREATED}

      clear-username-lock-table = "clear-username-lock-table"
      clear-username-lock-table = ${?TOPIC_CLEAR_USERNAME_LOCK_TABLE}

      user-enable-premium = "user-enable-premium"
      user-enable-premium = ${?TOPIC_USER_ENABLE_PREMIUM}

      user-disable-premium = "user-disable-premium"
      user-disable-premium = ${?TOPIC_USER_DISABLE_PREMIUM}

      prompt-all-users-weight-entry = "prompt-all-users-weight-entry"
      prompt-all-users-weight-entry = ${?TOPIC_PROMPT_ALL_USERS_WEIGHT_ENTRY}

      prompt-user-to-log-weight = "prompt-user-to-log-weight"
      prompt-user-to-log-weight = ${?TOPIC_PROMPT_USER_TO_LOG_WEIGHT}
    }

    subscriptions {
      clear-username-lock-table = "clear-username-lock-table"
      clear-username-lock-table = ${?SUBSCRIPTION_CLEAR_USERNAME_LOCK_TABLE}

      user-enable-premium = "user-enable-premium"
      user-enable-premium = ${?SUBSCRIPTION_USER_ENABLE_PREMIUM}

      user-disable-premium = "user-disable-premium"
      user-disable-premium = ${?SUBSCRIPTION_USER_DISABLE_PREMIUM}

      prompt-all-users-weight-entry = "prompt-all-users-weight-entry"
      prompt-all-users-weight-entry = ${?SUBSCRIPTION_PROMPT_ALL_USERS_WEIGHT_ENTRY}
    }
  }

}


#################################################################
# JDBC Pool
# https://www.playframework.com/documentation/2.8.x/SettingsJDBC
# https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
#################################################################

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
# db connections = ((physical_core_count * 2) + effective_spindle_count)
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
    hikaricp.connectionTestQuery = "SELECT 1"
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

# specific thread pools
contexts {

  pubsub-execution-context {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${fixedConnectionPool}
    }
  }

}

services {
  auth-service {
    host: "http://localhost"
    host: ${?AUTH_SERVICE_HOST}

    port: "9001"
    port: ${?AUTH_SERVICE_PORT}
  }

  social-service {
    host: "http://localhost"
    host: ${?SOCIAL_SERVICE_HOST}

    port: "9002"
    port: ${?SOCIAL_SERVICE_PORT}
  }

  discover-service {
    host: "http://localhost"
    host: ${?DISCOVER_SERVICE_HOST}

    port: "9003"
    port: ${?DISCOVER_SERVICE_PORT}
  }

  notification-service {
    host: "http://localhost"
    host: ${?NOTIFICATION_SERVICE_HOST}

    port: "9004"
    port: ${?NOTIFICATION_SERVICE_PORT}
  }

  chat-service {
    host: "http://localhost"
    host: ${?CHAT_SERVICE_HOST}

    port: "4000"
    port: ${?CHAT_SERVICE_PORT}
  }

  diary-service {
    host: "http://localhost"
    host: ${?DIARY_SERVICE_HOST}

    port: "9000"
    port: ${?DIARY_SERVICE_PORT}
  }

  public-gateway-service {
    host: "http://localhost"
    host: ${?PUBLIC_GATEWAY_SERVICE_HOST}

    port: "9000"
    port: ${?PUBLIC_GATEWAY_SERVICE_PORT}
  }

  meetup-service {
    host: "http://localhost"
    host: ${?MEETUP_SERVICE_HOST}

    port: "9000"
    port: ${?MEETUP_SERVICE_PORT}
  }

  awards-service {
    host: "http://localhost"
    host: ${?AWARDS_SERVICE_HOST}

    port: "9000"
    port: ${?AWARDS_SERVICE_PORT}
  }

  image-service {
    host: "http://localhost"
    host: ${?IMAGE_SERVICE_HOST}

    port: "10260"
    port: ${?IMAGE_SERVICE_PORT}

    token: "fbsxIBmBRNff6d97jwnFfWADhFWCs3fA"
    token: ${?IMAGE_SERVICE_TOKEN}
  }

  server {
    internal-service-secret: "change_this_service_secret_soon"
    internal-service-secret: ${?INTERNAL_SERVICE_SECRET}
  }
}

jwt {
  issuer = "https://auth.fitcentive.xyz"
  issuer = ${?JWT_ISSUER}
}

keycloak {
  server-url: "http://localhost:8080/auth",
  server-url: ${?KEYCLOAK_SERVER_URL},
}

user {
  deleted-user-static-id: "aaaaaaaa-aaaa-8bbb-8bbb-aaaaaaaaaaaa"
  deleted-user-static-id: ${?DELETED_USER_STATIC_ID}

  deleted-user-static-email: "deleted.user@fitcentive.io"
  deleted-user-static-email: ${?DELETED_USER_STATIC_EMAIL}
}

play.modules.enabled += "io.fitcentive.user.modules.PubSubModule"
play.modules.enabled += "io.fitcentive.user.modules.AuthActionsModule"
play.server.pidfile.path=/dev/null

